Imagine you are designing a grand castle where each room holds a specific amount 
of treasure. The castle is built in a binary layout, meaning every room may lead 
to two adjacent wings—a left wing and a right wing. 

An "organized section" of the castle follows this rule: for any given room, 
every room in its left wing contains a treasure value that is strictly less 
than the current room’s value, and every room in its right wing contains a 
value that is strictly greater. Additionally, each wing must itself be organized
according to the same rule.

Your challenge is to determine the maximum total treasure (i.e., the sum of 
treasure values) that can be gathered from any such organized section of the castle.

Example 1:
input=
1 4 3 2 4 2 5 -1 -1 -1 -1 -1 -1 4 6
output=
20

Castle:
          1
        /   \
       4     3
      / \   / \
     2   4 2   5
              / \
             4   6

Explanation: The best organized section starts at the room with a treasure value 
of 3, yielding a total treasure of 20.

Example 2:
input=
4 3 -1 1 2
output=
2

Castle:
    4
   /
  3
 / \
1   2

Explanation: The optimal organized section is just the single room with a 
treasure value of 2.

Example 3:
input=
-4 -2 -5
output=
0

Castle:
   -4
  /  \
-2   -5
 
Explanation: Since all rooms contain negative treasure values, no beneficial 
organized section exists, so the maximum total treasure is 0.

Constraints:

- The number of rooms in the castle ranges from 1 to 40,000.
- Each room’s treasure value is an integer between -40,000 and 40,000.










Imagine you're playing an adventure video game with a total of 'n' quests, numbered 
from 0 to n–1. Some quests have special unlock conditions: certain quests must be 
completed before others can be attempted. You’re provided with 'm' questDependencies 
where each element questDependencies[i] = [ai, bi] means that you must finish 
quest ai before you can start quest bi.

For instance, the dependency [0, 1] implies that quest 0 must be cleared before 
quest 1 becomes available. These requirements can also be indirect; if quest 'a' 
unlocks quest 'b', and quest 'b' unlocks quest 'c', then quest 'a' is considered 
an indirect prerequisite for quest 'c'.

In addition, you receive an array called inquiries of size 'k' where each inquiry 
inquiries[j] = [uj, vj] asks whether quest uj is a necessary precursor to quest vj. 
Your task is to return a boolean array result where each result[j] answers the 
jth inquiry.

Input format:
-------------
Line 1: Three space separated integers, representing n, m and k
Line 2: next m lines of dependencies
Line 3: next k lines of queries

Output format:
--------------
Resultant boolean array.

Example 1:
----------
Input=
2 1 2
1 0
0 1
1 0
  
Output= 
[false, true]  

Explanation: The dependency [1, 0] indicates that you must complete quest 1 
before attempting quest 0. Hence, quest 0 is not a prerequisite for quest 1, 
but quest 1 is for quest 0.

Example 2:
----------
Input=
2 0 2
1 0
0 1

Output=
[false, false]
  
Explanation: With no dependencies, each quest stands alone.

Example 3:
----------
Input=
3 2 2
1 2
2 0
1 0
1 2

Output=
[true, true]


Constraints:
• 2 <= n <= 100  
• 0 <= m <= (n * (n - 1) / 2)  
• Each questDependencies[i] contains exactly 2 elements  
• 0 <= ai, bi <= n - 1, with ai!= bi  
• All pairs [ai, bi] are unique  
• The dependency structure does not contain cycles  
• 1 <= k <= 10^4 
• 0 <= uj, vj <= numMissions - 1
